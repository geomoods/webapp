--
-- Script was generated by Devart dbForge Studio for MySQL, Version 7.2.78.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 2017-08-30 7:55:25 PM
-- Server version: 5.6.15-log
-- Client version: 4.1
--


-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

-- 
-- Set default database
--
USE geomoods;

--
-- Definition for table companies
--
DROP TABLE IF EXISTS companies;
CREATE TABLE companies (
  id INT(11) NOT NULL AUTO_INCREMENT,
  company_name VARCHAR(60) NOT NULL,
  company_email_domain VARCHAR(50) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = MYISAM
AUTO_INCREMENT = 1
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table group_members
--
DROP TABLE IF EXISTS group_members;
CREATE TABLE group_members (
  id INT(11) NOT NULL AUTO_INCREMENT,
  user_id INT(11) NOT NULL,
  group_id INT(11) NOT NULL,
  group_name VARCHAR(50) DEFAULT NULL,
  LastUpdateByUser DATETIME DEFAULT NULL,
  Anonymous TINYINT(4) NOT NULL DEFAULT 0,
  PRIMARY KEY (id),
  UNIQUE INDEX id (id)
)
ENGINE = MYISAM
AUTO_INCREMENT = 226
AVG_ROW_LENGTH = 34
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table groups
--
DROP TABLE IF EXISTS groups;
CREATE TABLE groups (
  id INT(11) NOT NULL AUTO_INCREMENT,
  Group_name VARCHAR(50) NOT NULL,
  Owner_id INT(11) NOT NULL,
  Owner_login VARCHAR(35) NOT NULL,
  Access_type TINYINT(4) NOT NULL,
  created TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  update_freq DOUBLE DEFAULT NULL,
  group_cat SMALLINT(6) DEFAULT NULL,
  PRIMARY KEY (Group_name),
  UNIQUE INDEX id (id)
)
ENGINE = MYISAM
AUTO_INCREMENT = 84
AVG_ROW_LENGTH = 41
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table user_mood
--
DROP TABLE IF EXISTS user_mood;
CREATE TABLE user_mood (
  id INT(11) NOT NULL AUTO_INCREMENT,
  entered DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  login_id INT(11) NOT NULL,
  login VARCHAR(35) NOT NULL DEFAULT '',
  SunVal FLOAT DEFAULT NULL,
  RainVal FLOAT DEFAULT NULL,
  CloudVal FLOAT DEFAULT NULL,
  ThunderVal FLOAT DEFAULT NULL,
  WeatherSymbol VARCHAR(10) DEFAULT NULL,
  Mood_Status SMALLINT(6) DEFAULT 0,
  PRIMARY KEY (login_id),
  UNIQUE INDEX id (id)
)
ENGINE = MYISAM
AUTO_INCREMENT = 22
AVG_ROW_LENGTH = 39
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table user_mood_hist
--
DROP TABLE IF EXISTS user_mood_hist;
CREATE TABLE user_mood_hist (
  id INT(11) NOT NULL AUTO_INCREMENT,
  entered DATETIME DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  login VARCHAR(35) DEFAULT NULL,
  SunVal FLOAT DEFAULT 0,
  RainVal FLOAT DEFAULT 0,
  CloudVal FLOAT DEFAULT 0,
  ThunderVal FLOAT DEFAULT 0,
  WeatherSymbol VARCHAR(20) DEFAULT NULL,
  login_id INT(11) DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE INDEX id (id)
)
ENGINE = MYISAM
AUTO_INCREMENT = 2196
AVG_ROW_LENGTH = 40
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table users
--
DROP TABLE IF EXISTS users;
CREATE TABLE users (
  id INT(11) NOT NULL AUTO_INCREMENT,
  login VARCHAR(35) NOT NULL,
  timestamp DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  pwd VARCHAR(35) DEFAULT NULL,
  email VARCHAR(50) DEFAULT NULL,
  corporate_email VARCHAR(50) DEFAULT NULL,
  company VARCHAR(60) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = MYISAM
AUTO_INCREMENT = 22
AVG_ROW_LENGTH = 28
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

DELIMITER $$

--
-- Definition for procedure Insert_Group
--
DROP PROCEDURE IF EXISTS Insert_Group$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Insert_Group(IN vOwner VARCHAR(35),IN vOwnerId INT,IN vGroupName VARCHAR(35),IN vAccessType TINYINT,IN vUpdateFreq INT)
BEGIN
INSERT ignore INTO groups (Group_name,Owner_id,Owner_login,Access_type, update_freq) VALUES (vGroupName,vOwnerId,vOwner,vAccessType, vUpdateFreq);
SELECT LAST_INSERT_ID() into @lastId;
INSERT INTO group_members (user_id,group_id, group_name,LastUpdateByUser)
VALUES (vOwnerId,@lastId,vGroupName, UTC_TIMESTAMP);
END
$$

--
-- Definition for procedure Insert_Mood
--
DROP PROCEDURE IF EXISTS Insert_Mood$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Insert_Mood(IN vLogin VARCHAR(255), IN vlogin_id FLOAT, IN vSunVal FLOAT, IN vCloudVal FLOAT, IN vRainVal FLOAT, IN vThunderVal FLOAT, IN vWeatherSymbol VARCHAR(20))
BEGIN
INSERT INTO user_mood_hist (login,login_id,SunVal, CloudVal, RainVal, ThunderVal, WeatherSymbol, entered)
VALUES (vLogin,vlogin_id,vSunVal,vCloudVal,vRainVal,vThunderVal,vWeatherSymbol,UTC_TIMESTAMP);

INSERT INTO user_mood (login,login_id,SunVal, CloudVal, RainVal, ThunderVal, WeatherSymbol, entered, Mood_Status)
VALUES (vLogin,vlogin_id,vSunVal,vCloudVal,vRainVal,vThunderVal,vWeatherSymbol,UTC_TIMESTAMP, 1) ON DUPLICATE KEY UPDATE    
SunVal=vSunVal,CloudVal=vCloudVal,RainVal=vRainVal,ThunderVal=vThunderVal, WeatherSymbol=vWeatherSymbol, entered = UTC_TIMESTAMP, Mood_Status = 1;

UPDATE group_members SET
LastUpdateByUser=UTC_TIMESTAMP WHERE user_id=vlogin_id;
END
$$

--
-- Definition for procedure Join_Group
--
DROP PROCEDURE IF EXISTS Join_Group$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Join_Group(IN vlogin_id FLOAT, IN vGroup_id FLOAT, IN vGroup_name VARCHAR(50), IN vPrivacyStatus INT)
BEGIN
INSERT INTO group_members (user_id,group_id, group_name, LastUpdateByUser, Anonymous)
VALUES (vlogin_id,vGroup_id, vGroup_name, UTC_TIMESTAMP,vPrivacyStatus);
END
$$

--
-- Definition for procedure Leave_Group
--
DROP PROCEDURE IF EXISTS Leave_Group$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Leave_Group(IN vlogin_id FLOAT, IN vGroup_id FLOAT)
BEGIN
DELETE FROM group_members WHERE user_id = vlogin_id  AND group_id = vGroup_id ;
END
$$

--
-- Definition for procedure Set_Groups_Privacy
--
DROP PROCEDURE IF EXISTS Set_Groups_Privacy$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Set_Groups_Privacy(IN vUserId INT, IN vGroupId INT, IN vPrivacyStatus TINYINT)
BEGIN

UPDATE group_members SET
Anonymous=vPrivacyStatus WHERE user_id=vUserId AND group_id=vGroupId;

END
$$

--
-- Definition for procedure Set_Update_Date
--
DROP PROCEDURE IF EXISTS Set_Update_Date$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Set_Update_Date(IN vUserId INT, IN vGroupId INT)
BEGIN

UPDATE group_members SET
LastUpdateByUser=UTC_TIMESTAMP WHERE user_id=vUserId AND group_id=vGroupId;

END
$$

--
-- Definition for procedure SignUp
--
DROP PROCEDURE IF EXISTS SignUp$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE SignUp(IN vLogin VARCHAR(35))
BEGIN
INSERT ignore INTO users (login) VALUES (vLogin);
SELECT LAST_INSERT_ID() into @lastId;
SELECT id, Group_name into @Global_group_id, @Global_group_name from groups where Access_type=10;

INSERT INTO geomoods.user_mood (entered, login_id, login, SunVal, RainVal, CloudVal, ThunderVal, WeatherSymbol, Mood_Status)
VALUES (UTC_TIMESTAMP, @lastId, vLogin, 0, 0, 0, 0,'None',1);

INSERT INTO group_members (user_id,group_id, group_name,LastUpdateByUser)
VALUES (@lastId,@Global_group_id,@Global_group_name, UTC_TIMESTAMP);
END
$$

DELIMITER ;

--
-- Definition for view default_groups
--
DROP VIEW IF EXISTS default_groups CASCADE;
CREATE OR REPLACE 
	DEFINER = 'root'@'localhost'
VIEW default_groups
AS
	select `groups`.`id` AS `id`,`group_members`.`group_id` AS `group_id`,`group_members`.`user_id` AS `user_id`,`groups`.`Owner_id` AS `Owner_id`,`groups`.`Group_name` AS `Group_name`,`group_members`.`Anonymous` AS `Anonymous`,`groups`.`update_freq` AS `update_freq` from (`groups` left join `group_members` on((`groups`.`id` = `group_members`.`group_id`))) where (`groups`.`Access_type` = 10);

--
-- Definition for view groups_list
--
DROP VIEW IF EXISTS groups_list CASCADE;
CREATE OR REPLACE 
	DEFINER = 'root'@'localhost'
VIEW groups_list
AS
	select `groups`.`id` AS `id`,`group_members`.`group_id` AS `group_id`,`group_members`.`user_id` AS `user_id`,`groups`.`Owner_id` AS `Owner_id`,`groups`.`Group_name` AS `Group_name` from (`groups` left join `group_members` on((`groups`.`id` = `group_members`.`group_id`)));

--
-- Definition for view groups_mood
--
DROP VIEW IF EXISTS groups_mood CASCADE;
CREATE OR REPLACE 
	DEFINER = 'root'@'localhost'
VIEW groups_mood
AS
	select `user_mood`.`id` AS `id`,`user_mood`.`entered` AS `entered`,`user_mood`.`login` AS `login`,`user_mood`.`SunVal` AS `SunVal`,`user_mood`.`RainVal` AS `RainVal`,`user_mood`.`CloudVal` AS `CloudVal`,`user_mood`.`ThunderVal` AS `ThunderVal`,`user_mood`.`login_id` AS `login_id`,`user_mood`.`WeatherSymbol` AS `WeatherSymbol`,`group_members`.`group_id` AS `group_id`,`group_members`.`group_name` AS `group_name`,`group_members`.`LastUpdateByUser` AS `LastUpdateByUser`,`group_members`.`Anonymous` AS `Anonymous` from (`user_mood` join `group_members` on((`user_mood`.`login_id` = `group_members`.`user_id`)));

--
-- Definition for view groups_mood_hist
--
DROP VIEW IF EXISTS groups_mood_hist CASCADE;
CREATE OR REPLACE 
	DEFINER = 'root'@'localhost'
VIEW groups_mood_hist
AS
	select `user_mood_hist`.`id` AS `id`,`user_mood_hist`.`entered` AS `entered`,`user_mood_hist`.`login` AS `login`,`user_mood_hist`.`SunVal` AS `SunVal`,`user_mood_hist`.`RainVal` AS `RainVal`,`user_mood_hist`.`CloudVal` AS `CloudVal`,`user_mood_hist`.`ThunderVal` AS `ThunderVal`,`user_mood_hist`.`login_id` AS `login_id`,`user_mood_hist`.`WeatherSymbol` AS `WeatherSymbol`,`group_members`.`group_id` AS `group_id`,`group_members`.`group_name` AS `group_name`,`group_members`.`LastUpdateByUser` AS `LastUpdateByUser` from (`user_mood_hist` join `group_members` on((`user_mood_hist`.`login_id` = `group_members`.`user_id`)));

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;